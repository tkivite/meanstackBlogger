swagger: '2.0'
info:
    version: 0.0.1
    title: 'Mean Stack Blogger'
host: 'localhost:10010'
basePath: /
schemes:
    - http
    - https
consumes:
    - application/json
produces:
    - application/json
paths:
    /hello:
        x-swagger-router-controller: hello_world
        get:
            description: 'Returns ''Hello'' to the caller'
            operationId: hello
            parameters: [{name: name, in: query, description: 'The name of the person to whom to say hello', required: false, type: string}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/HelloWorldResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
    /swagger:
        x-swagger-pipe: swagger_raw
    /movie:
        x-swagger-router-controller: movie
        get:
            operationId: getAll
            description: 'get the movies list'
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GetMoviesListResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
        post:
            operationId: save
            description: 'add a new movie to the list'
            parameters: [{name: title, description: 'Movie properties', in: body, required: true, schema: {$ref: '#/definitions/Movie'}}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GeneralResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
    '/movie/{id}':
        x-swagger-router-controller: movie
        get:
            operationId: getOne
            description: 'get a movie'
            parameters: [{name: id, type: string, in: path, required: true}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GetMovieResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
        put:
            operationId: update
            description: 'update a movie'
            parameters: [{name: id, description: 'Movie id', type: string, in: path, required: true}, {name: title, description: 'Movie properties', in: body, required: true, schema: {$ref: '#/definitions/Movie'}}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GeneralResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
        delete:
            operationId: delMovie
            description: 'delete a movie'
            parameters: [{name: id, description: 'Movie id', type: string, in: path, required: true}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GeneralResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
    /member:
        x-swagger-router-controller: member
        get:
            operationId: getAll
            description: 'get the members list'
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GetMembersListResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
        post:
            operationId: save
            description: 'add a new member to the list'
            parameters: [{name: firstName, description: 'Member properties', in: body, required: true, schema: {$ref: '#/definitions/Member'}}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GeneralResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
    '/member/{id}':
        x-swagger-router-controller: member
        get:
            operationId: getOne
            description: 'get a member'
            parameters: [{name: id, type: string, in: path, required: true}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GetMemberResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
        put:
            operationId: update
            description: 'update a member'
            parameters: [{name: id, description: 'Member id', type: string, in: path, required: true}, {name: firstName, description: 'Member properties', in: body, required: true, schema: {$ref: '#/definitions/Member'}}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GeneralResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
        delete:
            operationId: delMember
            description: 'delete a member'
            parameters: [{name: id, description: 'Member id', type: string, in: path, required: true}]
            responses: {'200': {description: Success, schema: {$ref: '#/definitions/GeneralResponse'}}, default: {description: Error, schema: {$ref: '#/definitions/ErrorResponse'}}}
definitions:
    HelloWorldResponse:
        required:
            - message
        properties:
            message: {type: string}
    ErrorResponse:
        required:
            - message
        properties:
            message: {type: string}
    GetMoviesListResponse:
        required:
            - movies
        properties:
            movies: {type: array, items: {type: object, properties: {id: {type: string}, title: {type: string}, year: {type: number}}}}
    Movie:
        type: object
        properties:
            title: {type: string, description: 'task object name'}
            year: {type: number, description: 'task description'}
        required:
            - title
            - year
    GeneralResponse:
        type: object
        properties:
            success: {type: number, description: 'returns 1 if successful'}
            description: {type: string, description: 'a short comment'}
        required:
            - success
            - description
    GetMovieResponse:
        required:
            - id
            - title
            - year
        properties:
            id: {type: string}
            title: {type: string}
            year: {type: number}

    GetMemberResponse:   
        required:
            - id
            - firstName
            - lastName
            - middleName
            - nationalId
            - email
            - phoneNumber
        properties:
            id       :   {type: number}
            firstName:   {type: string}
            lastName:    {type: string}
            middleName:  {type: string} 
            nationalId:  {type: string}
            email:       {type: string}
            phoneNumber: {type: string}    
    GetMembersListResponse:
        required:
            - members
        properties:
            members: {type: array, items: {type: object, properties: {id: {type: string},firstName: {type: string}, lastName: {type: string}, middleName: {type: string}, dateOfBirth: {type: string}, nationalId: {type: string}, phoneNumber: {type: string}, email: {type: string}}}}
    Member:
        type: object
        properties:
            firstName: {type: string, description: 'Member First Name'}
            lastName: {type: string, description: 'Member Last Name'}
            middleName: {type: string, description: 'Member Middle Name'}
            dateOfBirth: {type: string, description: 'Member Date of Birth'}
            nationalId: {type: string, description: 'National ID'}
            phoneNumber: {type: string, description: 'Member Phone Number'}
            email: {type: string, description: 'Member Email'}
        required:
            - firstName
            - lastName
            - middleName
            - nationalId
            - email
            - phoneNumber
